Encapsulation: a standard class where data are private and methods are public
	data hiding
	Netbanking: account>> acc holder, number, balance
	Gpay	  : bank, google account
	Billing	  : stock>> name, quantity, price
	

Constructor:
	A method>> modifier returntype name(param)
		name of the method can be anything
		will execute when we call manually
	Constructor/ special method>> modifier name(param)
		name of contructor should same as Classname
		will execute automatically when the object created for the class	
	purpose:
		to initialize class properties
		execute the important operations before other could perform:
			GPAY: bill pay, transfer,reacharge
				login via pin>> they could have written in constructor
	types:
		default>> no parameters
		parameterized>> with parameters

		
Polymorphsim:
  Overloading/ static/ compile time:
  	within a class/ in single class itself
	same name for multiple blocks
	parameters has to be different between each block by count, order and type
		constructor, method
  Overriding/ dynamic/ run time:
  	between two components which involved in "inheritance process"
  	parameter, name and returntype of a method from two components should be same
  	
  	overriding between class: not mandate
  	overriding with interface: mandate
  	

Inheritance: object reusability
	deriving/ copying one resource's property to another
	
	super/parent/base>>those who providing property to some one
	child/derived	 >>those who receives/ derive the property from some one
	
	Components those involves in inheritance process
		class: variables/object not mandate to initialize 
		interface: variables/object has to be initialized and we cannot changes the values since those are all constants/ final
	
	keywords:
		derivedclass extends baseclass
		derivedinterface extends baseinterface
		derivedclass implements interface,interface,interface
	
	types:
		single		: D<<P
		multilevel: P>>D1>>D2
		hierarchy: D2<<P>>D1
		multiple: D<<P1,P2,P3
		hybrid: combination of more than form
		
Abstraction:
	method logic/ body/definition hiding>> abstract method
	
	abstract class: hybrid form of class and interface
		both abstract and non abstract methods can be members
		can't make instantiation/ object to abstract class, the only way is inheritance
		even though abstract methods can be created here, unlike interface we have to 
			mention abstract keyword in front of methods that you desired to make abstract
			
		overriding from normal class during inheritance is not mandate
		but it is mandate during inheritance with abstract class
		